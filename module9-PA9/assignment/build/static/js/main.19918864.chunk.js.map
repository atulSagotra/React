{"version":3,"sources":["Components/Contacts/Contact.js","actions/contactAction.js","actions/types.js","Components/Contacts/Contacts.js","Components/layout/Header.js","Components/layout/TextInputGroup.js","Components/Contacts/AddContact.js","Components/Contacts/EditContact.js","Components/pages/notfound.js","reducers/contactReducer.js","reducers/index.js","store.js","Components/pages/About.js","Components/Test/Test.js","App.js","serviceWorker.js","index.js"],"names":["Contact","state","showContactInfo","onShowClick","e","setState","onDeleteClick","id","props","deleteContact","this","contact","name","email","phone","className","onClick","style","cursor","float","color","bind","to","marginRight","Component","connect","dispatch","a","axios","delete","type","payload","Contacts","getContacts","contacts","Fragment","map","key","res","data","Header","branding","href","defaultProps","TextInputGroup","label","value","placeholder","onChange","error","htmlFor","classNames","AddContact","errors","onSubmit","preventDefault","newContact","addContact","history","push","target","post","EditContact","updContact","match","params","updateContact","nextProps","nextState","getContact","put","initialState","combineReducers","action","filter","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","window","__REDUX_DEVTOOLS_EXTENSION__","Test","title","body","fetch","then","response","json","App","exact","path","component","About","notfound","Boolean","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.19918864.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport '../contact.css'\r\nimport PropTypes from 'prop-types'\r\n// import { Consumer } from '../../Context'\r\n// import axios from 'axios';\r\nimport { Link } from 'react-router-dom';\r\nimport { connect } from 'react-redux'\r\nimport { deleteContact } from '../../actions/contactAction'\r\n\r\nclass Contact extends Component {\r\n    state= {\r\n        showContactInfo: false\r\n    }\r\n    onShowClick = e =>{\r\n            this.setState({ showContactInfo: !this.state.showContactInfo })    \r\n    }\r\n    onDeleteClick = id =>{\r\n        this.props.deleteContact(id)\r\n        \r\n    }\r\n \r\n    render() {        \r\n        const {id,name,email,phone} = this.props.contact;\r\n        const { showContactInfo } = this.state;\r\n        return (\r\n\r\n            <div className = \"card card-body mb-3 text-left\">\r\n                <h4>{name} <i onClick = {this.onShowClick}\r\n                className=\"fa fa-sort-down\" style = {{ cursor: 'pointer'}}></i>\r\n                <i className=\"fa fa-times\" style = {{ cursor : 'pointer', float:'right',color:'red'}}\r\n                onClick = {this.onDeleteClick.bind(this,id)}\r\n                />\r\n                <Link to = {`contact/edit/${id}`}> <i className=\"fa fa-pencil\" \r\n                style = {{\r\n                    cursor:'pointer',\r\n                    float: 'right',\r\n                    color:'black',\r\n                    marginRight: '1rem'\r\n                }}/>\r\n                </Link>\r\n                </h4>\r\n                {showContactInfo ? (\r\n                    <ul className = \"list-group\">\r\n                    <li className = \"list-group-item\">Email: {email}</li>\r\n                    <li className = \"list-group-item\">Phone: {phone}</li>\r\n                </ul>\r\n                ): null }\r\n                \r\n            \r\n            </div>\r\n            \r\n        )\r\n}\r\n}\r\n\r\nContact.propTypes = {\r\n    contact: PropTypes.object.isRequired,\r\n    deleteContact: PropTypes.func.isRequired\r\n    // deleteClickHandler: PropTypes.func.isRequired\r\n}\r\nexport default connect(null, { deleteContact })(Contact);\r\n","import { GET_CONTACTS, DELETE_CONTACT, ADD_CONTACT, GET_CONTACT, UPDATE_CONTACT } from './types';\r\nimport axios from'axios'\r\n\r\n\r\nexport const getContacts = () => async dispatch =>{\r\n    const res = await axios('https://jsonplaceholder.typicode.com/users');\r\n    dispatch({\r\n        type: GET_CONTACTS,\r\n        payload: res.data\r\n    });\r\n}\r\n\r\nexport const getContact = (id) => async dispatch =>{\r\n    const res = await axios(`https://jsonplaceholder.typicode.com/users/${id}`);\r\n    dispatch({\r\n        type: GET_CONTACT,\r\n        payload: res.data\r\n    });\r\n}\r\n\r\nexport const deleteContact = (id) => async dispatch => {\r\n\r\n    try{\r\n        await axios.delete(`https://jsonplaceholder.typicode.com/users/${id}`)\r\n        dispatch({\r\n            type: DELETE_CONTACT,\r\n            payload: id\r\n        })\r\n    }catch(e){\r\n        dispatch({\r\n            type: DELETE_CONTACT,\r\n            payload: id\r\n        })\r\n    }\r\n    \r\n}\r\n\r\nexport const addContact = (contact) => async dispatch =>{\r\n    \r\n    const res = await axios.post('https://jsonplaceholder.typicode.com/users/',contact)\r\n    dispatch({\r\n        type: ADD_CONTACT,\r\n        payload: res.data\r\n    })\r\n}\r\nexport const updateContact = (contact) => async dispatch =>{\r\n    const res = await axios.put(`https://jsonplaceholder.typicode.com/users/${contact.id}`,contact)\r\n    dispatch({\r\n        type: UPDATE_CONTACT,\r\n        payload: res.data\r\n    })\r\n}","export const GET_CONTACTS = 'GET_CONTACTS';\r\nexport const DELETE_CONTACT = 'DELETE_CONTACT';\r\nexport const ADD_CONTACT = 'ADD_CONTACT';\r\nexport const GET_CONTACT = 'GET_CONTACT';\r\nexport const UPDATE_CONTACT = 'UPDATE_CONTACT';\r\n","import React, { Component } from 'react'\r\nimport Contact from './Contact'\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types'\r\nimport { getContacts } from '../../actions/contactAction'\r\n\r\nclass Contacts extends Component {\r\n\r\n    componentDidMount(){\r\n        this.props.getContacts();\r\n    }\r\n  \r\n    render() {\r\n        const { contacts } = this.props;\r\n        return (            \r\n            <React.Fragment>\r\n                            <h1 className=\"display-4 mb-2\">\r\n                                <span className=\"text-danger\">Contact List</span>\r\n                            </h1>\r\n                                {contacts.map(contact => (\r\n                                <Contact key = {contact.id}    contact = {contact} \r\n                                />))}\r\n                        </React.Fragment>\r\n        )\r\n\r\n    }\r\n   \r\n}\r\nContacts.propTypes = {\r\n    contacts: PropTypes.array.isRequired,\r\n    getContacts: PropTypes.func.isRequired\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    contacts: state.contact.contacts\r\n})\r\n\r\n\r\nexport default connect(mapStateToProps,{getContacts})(Contacts);","import React from 'react';\r\n// import PropTypes from \"prop-types\";\r\nimport '../contact.css';\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst Header = (props) => {\r\n    const {branding} = props;\r\n    \r\n    return (\r\n        <nav className = \" nav navbar navbar-expand-sm navbar-dark bg-danger mb-3 py-0\">\r\n            <div className = \"container\">\r\n                <a href = \"/\" className = \"navbar-brand\">\r\n                    {branding}\r\n                    </a>\r\n                    <div>\r\n                        <ul className = \"navbar-nav mr-auto\">\r\n                            <li className = \"nav-item\">\r\n                                <Link to = \"/\" className = \"nav-link\">\r\n                                    <i className=\"fa fa-home\"></i>\r\n                                </Link>\r\n                            </li>\r\n                            <li className = \"nav-item\">\r\n                                <Link to = \"/contact/add\" className = \"nav-link\">\r\n                                    <i className=\"fa fa-plus\"></i>\r\n                                </Link>\r\n                            </li>\r\n                            <li className = \"nav-item\">\r\n                                <Link to = \"/about\" className = \"nav-link\">\r\n                                    <i className=\"fa fa-question\"></i>\r\n                                </Link>\r\n                            </li>\r\n                        </ul>\r\n                    </div>\r\n                \r\n            </div>\r\n        </nav>    \r\n        // <div>\r\n        //     <h1 style = {headingStyle}>{branding}</h1>\r\n        // </div>\r\n    );\r\n};\r\n// const headingStyle = {\r\n//     color : 'green',\r\n//     fontSize : \"40px\"\r\n// }\r\nHeader.defaultProps = {\r\n    branding: 'My App'\r\n};\r\n// Header.PropTypes = {\r\n//     branding: PropTypes.string.isRequired\r\n// }\r\n\r\n\r\nexport default Header;\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames/bind';\r\n\r\nconst TextInputGroup = ({\r\n    label,\r\n    name,\r\n    value,\r\n    placeholder,\r\n    type,\r\n    onChange,\r\n    error\r\n}) => {\r\n    \r\n\r\n    return (\r\n        <div className=\"form-group text-left\">\r\n            <label htmlFor= {name} >{label}</label>\r\n            <input\r\n             type= {type} \r\n             name = {name} \r\n             className= {classNames('form-control form-control-lg ',{\r\n                 'is-invalid':error\r\n             } )}\r\n             placeholder = {placeholder}\r\n            value = {value}\r\n            onChange = {onChange}\r\n            />\r\n            {error && <div className = \"invalid-feedback\">\r\n                {error}\r\n                </div> }\r\n            \r\n        </div>\r\n    );\r\n};\r\n\r\nTextInputGroup.propTypes = {\r\n    name: PropTypes.string.isRequired,\r\n    label: PropTypes.string.isRequired,\r\n    placeholder: PropTypes.string.isRequired,\r\n    value: PropTypes.string.isRequired,\r\n    type: PropTypes.string.isRequired,\r\n    onChange: PropTypes.func.isRequired,\r\n    error: PropTypes.string\r\n\r\n}\r\nTextInputGroup.defaultProps = {\r\n    type: 'text'\r\n}\r\nexport default TextInputGroup\r\n","import React, { Component } from 'react';\r\n// import { Consumer } from '../../Context';\r\n// import {v1 as uuid} from \"uuid\"; \r\nimport TextInputGroup from '../layout/TextInputGroup'\r\nimport { connect } from 'react-redux'\r\nimport PropTypes from 'prop-types'\r\nimport {addContact} from '../../actions/contactAction'\r\nclass AddContact extends Component {\r\n    state = {\r\n        name : '',\r\n        email: '',\r\n        phone: '',\r\n        errors: {}\r\n    }\r\n\r\n    onSubmit =  (e) => {\r\n        e.preventDefault();\r\n\r\n        const { name, email, phone } = this.state;\r\n        // Check for errors\r\n        if(name === \"\"){\r\n            this.setState({errors: { name: \"Name is Required\"}})\r\n            return;\r\n        }\r\n        if(email === \"\"){\r\n            this.setState({errors: { email: \"Email is Required\"}})\r\n            return;\r\n        }\r\n        if(phone === \"\"){\r\n            this.setState({errors: { phone: \"Phone is Required\"}})\r\n            return;\r\n        }\r\n        const newContact = {\r\n            // id: uuid(),\r\n            name,\r\n            email,\r\n            phone\r\n        }\r\n        this.props.addContact(newContact);\r\n\r\n        //// SUBMIT CONTACT ////\r\n        \r\n\r\n\r\n        //clear state\r\n        this.setState({\r\n            name: '',\r\n            email: '',\r\n            phone: '',\r\n            errors: {}\r\n        });\r\n        this.props.history.push('/')\r\n    }\r\n    onChange = (e) => this.setState({ [e.target.name]: \r\n        e.target.value });\r\n   \r\n    \r\n\r\n    render() {\r\n        const { name, email, phone, errors } = this.state;\r\n\r\n        return (\r\n            <div className=\"card mb-3\">\r\n            <div className=\"card-header\">Add Contact</div>\r\n                <div className=\"card-body\">\r\n                    <form onSubmit = { this.onSubmit.bind(this) }>\r\n                        <TextInputGroup\r\n                            label = \"Name: \"\r\n                            name = \"name\"\r\n                            placeholder = \"Enter Name...\"\r\n                            value = { name }\r\n                            onChange = {this.onChange}\r\n                            errors = {errors.name}\r\n                            />\r\n                        <TextInputGroup\r\n                            label = 'Email: '\r\n                            type = 'email'\r\n                            name = 'email'\r\n                            placeholder = \"Enter Email...\"\r\n                            value = { email }\r\n                            onChange = {this.onChange}\r\n                            errors = {errors.email}\r\n                            />\r\n                        <TextInputGroup\r\n                            label = \"Phone: \"\r\n                            name = \"phone\"\r\n                            placeholder = \"Enter Phone...\"\r\n                            value = { phone }\r\n                            onChange = {this.onChange}\r\n                            errors = {errors.phone}\r\n                            />                        \r\n                        <input type=\"submit\" value=\"Add Contact\" className= \"btn btn-light btn-black\" />\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        )\r\n        \r\n    }\r\n}\r\n\r\nAddContact.propTypes = {\r\n    addContact: PropTypes.func.isRequired\r\n}\r\n\r\nexport default connect(null, {addContact})(AddContact);\r\n","import React, { Component } from 'react';\r\n// import { Consumer } from '../../Context';\r\n// import {v1 as uuid} from \"uuid\"; \r\nimport TextInputGroup from '../layout/TextInputGroup'\r\n// import uuid from 'uuid';\r\nimport axios from 'axios' \r\nimport PropTypes from 'prop-types'\r\nimport { connect } from 'react-redux'\r\nimport { getContact,updateContact } from '../../actions/contactAction'\r\n\r\nclass EditContact extends Component {\r\n    state = {\r\n        name : '',\r\n        email: '',\r\n        phone: '',\r\n        errors: {}\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps,nextState){\r\n        const {name,email,phone} = nextProps.contact;\r\n        this.setState({\r\n            name,\r\n            email,\r\n            phone\r\n        })\r\n    }\r\n\r\n    componentDidMount(){\r\n        const { id } = this.props.match.params;\r\n        this.props.getContact(id)\r\n        \r\n    }\r\n\r\n    onSubmit =  (e) => {\r\n        e.preventDefault();\r\n\r\n        const { name, email, phone } = this.state;\r\n        // Check for errors\r\n        if(name === \"\"){\r\n            this.setState({errors: { name: \"Name is Required\"}})\r\n            return;\r\n        }\r\n        if(email === \"\"){\r\n            this.setState({errors: { email: \"Email is Required\"}})\r\n            return;\r\n        }\r\n        if(phone === \"\"){\r\n            this.setState({errors: { phone: \"Phone is Required\"}})\r\n            return;\r\n        }\r\n        \r\n\r\n        const { id } = this.props.match.params;\r\n\r\n        const updContact = {\r\n            id,\r\n            name,\r\n            email,\r\n            phone\r\n        }\r\n\r\n        this.props.updateContact(updContact)\r\n\r\n        //// UPDATE CONTACT ////     \r\n\r\n\r\n        //clear state\r\n        this.setState({ \r\n            name: '',\r\n            email: '',\r\n            phone: '',\r\n            errors: {}\r\n        });\r\n        this.props.history.push('/')\r\n    }\r\n    onChange = (e) => this.setState({ [e.target.name]: \r\n        e.target.value });\r\n   \r\n    \r\n\r\n    render() {\r\n        const { name, email, phone, errors } = this.state;\r\n\r\n        return (\r\n            <div className=\"card mb-3\">\r\n                <div className=\"card-header\">Edit Contact</div>\r\n                <div className=\"card-body\">\r\n                    <form onSubmit = { this.onSubmit }>\r\n                        <TextInputGroup\r\n                            label = \"Name: \"\r\n                            name = \"name\"\r\n                            placeholder = \"Enter Name...\"\r\n                            value = { name }\r\n                            onChange = {this.onChange}\r\n                            errors = {errors.name}\r\n                            />\r\n                        <TextInputGroup\r\n                            label = 'Email: '\r\n                            type = 'email'\r\n                            name = 'email'\r\n                            placeholder = \"Enter Email...\"\r\n                            value = { email }\r\n                            onChange = {this.onChange}\r\n                            errors = {errors.email}\r\n                            />\r\n                        <TextInputGroup\r\n                            label = \"Phone: \"\r\n                            name = \"phone\"\r\n                            placeholder = \"Enter Phone...\"\r\n                            value = { phone }\r\n                            onChange = {this.onChange}\r\n                            errors = {errors.phone}\r\n                            />                        \r\n                        <input type=\"submit\" value=\"Edit Contact\" className= \"btn btn-light btn-black\" />\r\n                    </form>\r\n                </div>\r\n            </div>\r\n                  \r\n        )\r\n        \r\n    }\r\n}\r\nEditContact.propTypes = {\r\n    contact: PropTypes.object.isRequired,\r\n    getcontact: PropTypes.func.isRequired\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    contact: state.contact.contact\r\n})\r\nexport default connect(mapStateToProps, {getContact, updateContact} )(EditContact);\r\n","import React from 'react'\r\n\r\nexport default () => {\r\n    return (\r\n        <div>\r\n            <h1 className=\"display-4\"><span className=\"text-danger\">404 Page Not Found</span></h1>\r\n            <p className=\"lead\">Sorry, that page does not exist.</p>\r\n        </div>\r\n    )\r\n}\r\n","import { GET_CONTACTS , DELETE_CONTACT, ADD_CONTACT, GET_CONTACT, UPDATE_CONTACT } from '../actions/types'\r\n\r\nconst initialState = {\r\n    contacts: [   ],\r\n    contact: {}\r\n};\r\n\r\nexport default function(state = initialState,action){\r\n    switch(action.type){\r\n        case GET_CONTACTS:\r\n            return{\r\n                ...state,\r\n                contacts: action.payload\r\n            }\r\n        case DELETE_CONTACT:\r\n            return{\r\n                ...state,\r\n                contacts: state.contacts.filter(contact => \r\n                    contact.id !== action.payload)\r\n            }\r\n        case ADD_CONTACT:\r\n            return{\r\n                ...state,\r\n                contacts: [action.payload, ...state.contacts]\r\n            }\r\n        case GET_CONTACT:\r\n            return{\r\n                ...state,\r\n                contact: action.payload\r\n            }\r\n        case UPDATE_CONTACT:\r\n            return{\r\n                ...state,\r\n                contacts: state.contacts.map(contact =>\r\n                    contact.id === action.payload.id ? (contact = action.payload): contact )\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}","import { combineReducers } from 'redux';\r\nimport contactReducer from './contactReducer';\r\n\r\nexport default combineReducers({\r\n    contact: contactReducer\r\n})","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers';\r\n\r\nconst initialState = {};\r\n\r\nconst middleware = [thunk];\r\n\r\nconst store = createStore(rootReducer, initialState,\r\n    compose(applyMiddleware(...middleware),\r\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n    ));\r\n\r\nexport default store","import React from 'react'\r\n\r\nexport default () => {\r\n    return (\r\n        <div>\r\n            <h1 className = \"display-4\">About Contact Manager</h1>\r\n            <p className = \"lead\">Simple app to manage Contacts</p>\r\n            <p className=\"text-secondary\">Version 1.0.0</p>\r\n        </div>\r\n    )\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nclass Test extends Component {\r\nstate = {\r\n    title:'',\r\n    body:''\r\n};\r\n\r\n    componentDidMount(){\r\n        fetch\r\n        ('https://jsonplaceholder.typicode.com/posts/1')\r\n        .then(response => response.json())\r\n        .then(data => this.setState({\r\n            title: data.title,\r\n            body: data.body\r\n        }))\r\n    }\r\n    // componentWillMount(){\r\n    //     console.log(\"ComponentWillMount....\")\r\n    // }\r\n    // componentWillRecieveProps(nextProps, nextState){\r\n    //     console.log(\"ComponentWillRecieveProps....\")\r\n    // }\r\n    // static getSerivedStateFromProps(nextProps, prevState){\r\n    //     console.log(\"ComponentWillRecieveProps....\")\r\n    //     return {\r\n    //         test: 'something'\r\n    //     }\r\n    // }\r\n    // getSnapshotBeforeUpdate(prevProps, prevState){\r\n    //     console.log('getSnapshotBeforeUpdate...');\r\n    // }\r\n    render() {\r\n        const {title,body} = this.state\r\n        return (\r\n            <div>\r\n                <h1>{ title }</h1>\r\n        <p>{ body }</p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Test;\r\n","import React, { Component } from 'react';\r\nimport {  HashRouter as Router, Route, Switch} from 'react-router-dom';\r\n// import logo from './logo.svg';\r\nimport Contacts from \"./Components/Contacts/Contacts\"\r\nimport './App.css';\r\nimport Header from './Components/layout/Header';\r\nimport AddContact from './Components/Contacts/AddContact'\r\nimport EditContact from './Components/Contacts/EditContact'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\n// import { Provider }from './Context';\r\nimport notfound from './Components/pages/notfound'\r\nimport { Provider } from 'react-redux';\r\nimport store from './store';\r\nimport About from './Components/pages/About'\r\nimport Test from './Components/Test/Test'\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <Provider store = {store} >\r\n        <Router>\r\n          <div className=\"App\">\r\n            <Header branding = \"Contact Manager\"/>\r\n            <div className=\"container\">\r\n             <Switch>\r\n               <Route exact path = \"/\" component = {Contacts}/>\r\n               <Route exact path = \"/contact/add\" component = { AddContact }/>\r\n               <Route exact path = \"/contact/edit/:id\" component = { EditContact }/>\r\n               <Route exact path = \"/about\" component = { About }/>\r\n               <Route exact path = \"/test\" component = { Test }/>\r\n               <Route component = { notfound }/>\r\n               \r\n             </Switch>\r\n            </div>          \r\n          </div>\r\n        </Router>   \r\n      </Provider>   \r\n    );\r\n  }\r\n  \r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}